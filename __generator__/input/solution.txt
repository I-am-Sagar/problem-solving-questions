#include <bits/stdc++.h>
using namespace std;
#define ll long long int
 
ll modExp(ll a, ll m, ll n){
    ll ans = 1;
    while (m>0) {
        if (m % 2 == 1) {
            ans = (ans * a) % n;
            m--;
        }
        a = (a * a) %n;
        m/=2;
    }
    return ans;
}

ll getHeight(ll n){
    ll x = ceil(log2(n));
    return 2* (ll)pow(2,x) - 1;
}
 
void build(ll ar[], ll tree[], ll start, ll end, ll node){
    if(start == end){
        tree[node] = ar[start];
        return ;
    }
    ll mid = (start + end) /2;
    build(ar, tree, start, mid, node*2 + 1);
    build(ar, tree, mid + 1, end, node*2 + 2);
    tree[node] = (tree[node*2 + 2] + ((modExp(2, end - mid, 3) * tree[node*2 + 1]) %3)) %3;
}

void update(ll ar[], ll tree[], ll start, ll end, ll idx, ll node){
    if(start == end){
        ar[idx] = 1;
        tree[node] = 1;
        return ;
    }
    ll mid = (start + end) /2;
    if(idx >= start && idx <= mid){
        update(ar, tree, start, mid, idx, node*2 + 1);
    }
    else{
        update(ar, tree, mid + 1, end, idx, node*2 + 2);
    }
    tree[node] = (tree[node*2 + 2] + ((modExp(2, end - mid, 3) * tree[node*2 + 1])%3) ) %3;
}
 
ll query(ll ar[], ll tree[], ll start, ll end, ll l, ll r, ll node){
    if(start>end || start>r || end<l)
        return 0;
    if(start>=l && end<=r) return (tree[node] * modExp(2, r- end, 3)) %3;
 
    ll mid = (start + end) /2;
    ll p1 = query(ar, tree, start, mid, l, r, node*2 + 1);
    ll p2 = query(ar, tree, mid + 1, end, l, r, node*2 + 2);
 
    return (p1 + p2) %3;
}
 
int main(){
 
    ll n;
    cin>>n;
    
    ll ar[n];
 
    ll size = getHeight(n);
    ll tree[size];
 
    for(int i=0; i<n; i++){
        char ch;
        cin>>ch;
        ar[i] = ch - '0';
    }
 
    build(ar, tree, 0, n-1, 0);

    int q;
    cin>>q;
    for(int i=0; i<q; i++){
        int ch;
        cin>>ch;
        if(ch == 0){
            int l, r;
            cin>>l>>r;
            cout<<query(ar, tree, 0, n-1, l, r, 0)<<endl;
        }
        else{
            int x;
            cin>>x;
            if(ar[x] == 0){
                update(ar, tree, 0, n-1, x, 0);
            }
        }
    }
 
    return 0;
}